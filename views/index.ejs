<!DOCTYPE html>
<html lang="es">
<head>
<meta charset="UTF-8">
<script src="https://cdn.tailwindcss.com"></script>
<title>Tabla de Posiciones</title>
<style>
  body {
    background-image: url('https://i.blogs.es/082c51/mortalkombat/1366_2000.jpg');
    background-size: cover; /* Para que cubra toda la pantalla */
    background-repeat: no-repeat; /* Evita que se repita */
    background-attachment: fixed; /* Hace que el fondo se mantenga fijo al hacer scroll */
  }
  table {
    width: 100%;
    border-collapse: collapse;
    background-color: rgba(255, 255, 255, 0.9); /* Fondo blanco con opacidad */
  }
  th, td {
    padding: 10px;
    text-align: left;
    border: 1px solid #000000;
  }
  th {
    background-color: #f90000;
  }
  .edit-input, .save-button {
    display: none;
  }
  form {
    display: inline;
  }
</style>

</head>
<body>
<h1>Tabla de Posiciones</h1>
<h2>Agregar Persona</h2>
<form id="formAgregar" action="/agregar" method="POST">
  <input type="text" name="titulo" id="tituloInput" placeholder="Nombre de la Persona" required>
  <button type="submit" style="background-color: red; color: white; border: 2px solid red; padding: 5px 10px; border-radius: 4px; cursor: pointer;">
    Agregar
  </button>
  <br><br>
</form>

      <script>
        document.getElementById('formAgregar').addEventListener('submit', function (e) {
  e.preventDefault(); // Previene la recarga de la página

  const tituloInput = document.getElementById('tituloInput');
  const titulo = tituloInput.value.trim();

  if (titulo) {
    fetch('/agregar', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ titulo })
    })
    .then(response => {
      if (response.ok) {
        return response.json(); // Asegúrate de que el servidor devuelva un JSON
      }
      throw new Error('Error al agregar el tema.');
    })
    .then(data => {
      // Agrega el nuevo tema al DOM
      const tableBody = document.querySelector('tbody');
      const newRow = document.createElement('tr');
      newRow.setAttribute('data-tema-id', data.id); // Asegúrate de que el servidor devuelva el ID
      newRow.innerHTML = `
        <td class="tema-nombre">${data.titulo}</td>
        <td class="tema-votos">${data.votos}</td>
        <td>
          <button onclick="votarTema(${data.id})">Votar</button>
          <button class="edit-button" onclick="mostrarEditor(this)">Editar</button>
          <form onsubmit="editarTema(event, '${data.id}')" class="edit-form" style="display: inline;">
            <input type="text" name="nuevoTitulo" placeholder="Nuevo Nombre" class="edit-input">
            <button type="submit" class="save-button">Guardar</button>
          </form>
          <button onclick="eliminarTema('${data.id}')">Eliminar</button>
        </td>
      `;
      tableBody.appendChild(newRow);
      tituloInput.value = ''; // Limpia el campo de entrada
    })
    .catch(error => {
      console.error('Error al agregar el tema:', error);
      alert('Hubo un problema al agregar el tema.');
    });
  } else {
    alert('El título no puede estar vacío.');
  }
});

      </script>
<table>
    <thead>
    <tr>
        <th id="nombre">Nombre</th>
        <th id="votos">Votos</th>
        <th id="acciones">Acciones</th>
    </tr>
    <script>
      document.getElementById("nombre").style.color = "white";
      document.getElementById("votos").style.color = "white";
      document.getElementById("acciones").style.color = "white";
    </script>
    </thead>
    <tbody>
    <% temas.forEach(tema => { %>
        <tr data-tema-id="<%= tema.id %>">
        <td class="tema-nombre"><%= tema.titulo %></td>
        <td class="tema-votos"><%= tema.votos %></td>
        <td>
            <!-- Botón de votar -->
            <% if (tema && tema.id) { %>
              <button onclick="votarTema('<%= tema.id %>')">Votar</button>
            <% } else { %>
              <button disabled>No se puede votar</button>
            <% } %>
              <script>
                function votarTema(id) {
  fetch(`/votar/${id}`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' }
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      const row = document.querySelector(`tr[data-tema-id="${id}"]`);
      const votosCell = row.querySelector('.tema-votos');
      votosCell.textContent = data.votos; // Actualiza el número de votos
      function reordenarTabla() {
  const tableBody = document.querySelector('tbody');
  const rows = Array.from(tableBody.querySelectorAll('tr'));

  // Ordena las filas por el número de votos en orden descendente
  rows.sort((a, b) => {
    const votosA = parseInt(a.querySelector('.tema-votos').textContent, 10);
    const votosB = parseInt(b.querySelector('.tema-votos').textContent, 10);
    return votosB - votosA; // Orden descendente por número de votos
  });

  // Reordena las filas en el DOM
  rows.forEach(row => tableBody.appendChild(row));
}

      // Llama a la función para reordenar la tabla después de actualizar los votos
      reordenarTabla();
    } else {
      alert('Error al votar: ' + data.message);
    }
  })
  .catch(error => {
    console.error('Error al enviar la solicitud:', error);
  });
}


              </script>
            <!-- Botón de editar -->
            <button class="edit-button" onclick="mostrarEditor(this)">Editar</button>

            <!-- Formulario de edición -->
            <form onsubmit="editarTema(event, '<%= tema.id %>')" class="edit-form" style="display: inline;">
              <input type="text" name="nuevoTitulo" placeholder="Nuevo Nombre" class="edit-input">
              <button type="submit" class="save-button">Guardar</button>
            </form>
            <script>
              function editarTema(event, id) {
  event.preventDefault(); // Evita la recarga de la página

  const form = event.target;
  const nuevoTitulo = form.querySelector('input[name="nuevoTitulo"]').value.trim();

  if (!nuevoTitulo) {
    alert('El título no puede estar vacío.');
    return;
  }

  fetch(`/actualizar/${id}?_method=PUT`, {
    method: 'POST', // Usando POST debido a method-override
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({ nuevoTitulo })
  })
  .then(response => {
    if (!response.ok) {
      return response.json().then(data => {
        throw new Error(data.message || 'No se pudo actualizar el tema.');
      });
    }
    return response.json();
  })
  .then(data => {
    if (data.success) {
      const row = document.querySelector(`tr[data-tema-id="${id}"]`);
      if (row) {
        const nombreCell = row.querySelector('.tema-nombre');
        nombreCell.textContent = nuevoTitulo;

        // Oculta el formulario de edición
        const input = form.querySelector('.edit-input');
        const saveButton = form.querySelector('.save-button');
        const editButton = row.querySelector('.edit-button');
        input.style.display = 'none';
        saveButton.style.display = 'none';
        editButton.style.display = 'inline';
      }
    } else {
      alert('Error: ' + data.message);
    }
  })
  .catch(error => {
    console.error('Error al actualizar el tema:', error);
    alert('Hubo un problema al intentar actualizar el tema.');
  });
}

            </script>
            <!-- Botón de eliminar -->
            <button onclick="eliminarTema('<%= tema.id %>')">Eliminar</button>
        </td>
        </tr>
    <% }) %>
    </tbody>
</table>

<script>
  function mostrarEditor(button) {
    const row = button.closest('tr');
    const input = row.querySelector('.edit-input');
    const saveButton = row.querySelector('.save-button');
    const editButton = row.querySelector('.edit-button');
    input.style.display = 'inline';
    saveButton.style.display = 'inline';
    editButton.style.display = 'none';
  }

  function editarTema(event, id) {
    event.preventDefault(); // Evita la recarga de la página

    const form = event.target;
    const nuevoTitulo = form.querySelector('input[name="nuevoTitulo"]').value.trim();

    if (!nuevoTitulo) {
      alert('El título no puede estar vacío.');
      return;
    }

    fetch(`/actualizar/${id}?_method=PUT`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ nuevoTitulo })
    })
    .then(response => {
      if (!response.ok) {
        return response.json().then(data => {
          throw new Error(data.message || 'No se pudo actualizar el tema.');
        });
      }
      return response.json();
    })
    .then(data => {
      if (data.success) {
        const row = document.querySelector(`tr[data-tema-id="${id}"]`);
        if (row) {
          const nombreCell = row.querySelector('.tema-nombre');
          nombreCell.textContent = nuevoTitulo;

          // Oculta el formulario de edición
          const input = form.querySelector('.edit-input');
          const saveButton = form.querySelector('.save-button');
          const editButton = row.querySelector('.edit-button');
          input.style.display = 'none';
          saveButton.style.display = 'none';
          editButton.style.display = 'inline';
        }
      } else {
        alert('Error: ' + data.message);
      }
    })
    .catch(error => {
      console.error('Error al actualizar el tema:', error);
      alert('Hubo un problema al intentar actualizar el tema.');
    });
  }

  function eliminarTema(id) {
    if (!confirm('¿Estás seguro de que deseas eliminar este tema?')) {
      return;
    }

    fetch(`/eliminar/${id}`, {
      method: 'DELETE',
      headers: {
        'Content-Type': 'application/json'
      }
    })
    .then(response => {
      if (response.ok) {
        const row = document.querySelector(`tr[data-tema-id="${id}"]`);
        if (row) {
          row.remove();
        }
      } else {
        throw new Error('No se pudo eliminar el tema.');
      }
    })
    .catch(error => {
      console.error('Error al eliminar el tema:', error);
      alert('Hubo un problema al intentar eliminar el tema.');
    });
  }
</script>
</body>
</html>
